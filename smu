#!/bin/bash

source /dev/stdin <<<"$(
	curl -s "https://raw.githubusercontent.com/nicholasadamou/utilities/master/scripts/base/base.sh"
)"

# TODO - split the installer script into its own repository and use it as a submodule

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Path to the 'set-me-up' directory
readonly smu_home_dir=${smu_home_dir:-"${HOME}/set-me-up"}

# Get the absolute path of the 'scripts' directory.
# This is only for aesthetic reasons to have an absolute symlink path instead of a relative one
# <path-to-smu>/scripts/somedotfile vs <path-to-smu>/scripts/brew/../somedotfile
readonly installer_scripts_path="${smu_home_dir}/set-me-up-installer/scripts"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

header() {
	echo -en "\n███████╗███████╗████████╗   ███╗   ███╗███████╗    ██╗   ██╗██████╗"
	echo -en "\n██╔════╝██╔════╝╚══██╔══╝   ████╗ ████║██╔════╝    ██║   ██║██╔══██╗"
	echo -en "\n███████╗█████╗     ██║█████╗██╔████╔██║█████╗█████╗██║   ██║██████╔╝"
	echo -en "\n╚════██║██╔══╝     ██║╚════╝██║╚██╔╝██║██╔══╝╚════╝██║   ██║██╔═══╝"
	echo -en "\n███████║███████╗   ██║      ██║ ╚═╝ ██║███████╗    ╚██████╔╝██║"
	echo -en "\n╚══════╝╚══════╝   ╚═╝      ╚═╝     ╚═╝╚══════╝     ╚═════╝ ╚═╝"
	echo -en "\n\n"
}

create_bash_local() {

	declare -r FILE_PATH="$HOME/.bash.local"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	if [[ ! -e "$FILE_PATH" ]] || [[ -z "$FILE_PATH" ]]; then
		printf "%s\n" "#!/bin/bash" >>"$FILE_PATH"
	fi

}

install_brew() {

	bash "${installer_scripts_path}"/brew/brew.sh

	if command -v brew &>/dev/null; then
		if [[ -d "$(brew --prefix)/bin" ]]; then
			export PATH="$(brew --prefix)/bin:$PATH"
		fi

		if [[ -d "$(brew --prefix)/sbin" ]]; then
			export PATH="$(brew --prefix)/sbin:$PATH"
		fi
	fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

main() {
	# This is a wrapper script for 'smu.py'.
	# It is used to check if the (minimal) required dependencies are installed.
	# If they are not installed, then this script will attempt to install them.

	echo -e "\n${bold}\$HOME sweet /~\n${normal}"

	echo -e "Welcome to the '${bold}set-me-up${normal}' installer."
	echo -e "For more information, please see [https://github.com/nicholasadamou/set-me-up]."
	echo -e "Please follow the on-screen instructions.\n"

	warn "${bold}This script sets up new machines, *use with caution*${normal}."
	warn "${bold}Ensure your Mac or *Debian* Linux system is fully up-to-date${normal}."

	header

	warn "'${bold}set-me-up${normal}' may overwrite existing files in your home directory."

	printf "\n"

	read -r -p "Are you sure you want to continue? (y/n) " -n 1
	echo ""

	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 0

	printf "\n"

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	# Check if ~/.bash.local exists
	if [ ! -f "${HOME}/.bash.local" ]; then
		print_error "'~/.bash.local' does not exist."

		# We must first create the $HOME/.bash.local configuration file
		# in order for the brew module to properly install Homebrew.
		create_bash_local
	fi

	# Check if 'brew' is installed
	if ! cmd_exists "brew"; then
		print_error "'brew' is not installed."

		# Install 'brew'
		install_brew
	fi

	if ! cmd_exists "python3"; then
		print_error "Python 3 is not installed."

		# Install 'python3' via 'brew' and 'pyenv'
		# 'pyenv' is a Python version management tool
		# see: https://github.com/pyenv/pyenv
		bash "${installer_scripts_path}"/python/pyenv.sh
	fi

	# Check if 'rcm' is installed, because it is required for this script to work.
	# 'rcm' is a dotfile management tool that is used to symlink files into the home directory.
	# see: https://github.com/thoughtbot/rcm

	# 'rcm' commands
	commands=(
		"rcup"
		"rcdn"
		"lsrc"
	)

	if ! cmd_exists "${commands[@]}"; then
		print_error "'rcm' is not installed."

		# Install 'rcm' via 'brew'
		bash "${installer_scripts_path}"/rcm/rcm.sh
	fi

	# Determine if 'git' is installed
	if ! cmd_exists "git"; then
		print_error "'git' is not installed."

		# Install 'git' via 'brew'
		brew_install "git"
	fi

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	# Check that the 'smu.py' script exists
	if [ ! -f "${smu_home_dir}/smu.py" ]; then
		print_error "'smu.py' does not exist."
		exit 1
	fi

	# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

	python3 "${smu_home_dir}"/smu.py "$@"

}

main "$@"
